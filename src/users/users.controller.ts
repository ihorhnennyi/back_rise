import {
  Body,
  Controller,
  Delete,
  Get,
  Param,
  Patch,
  Post,
  Request,
  UseGuards,
} from '@nestjs/common';
import {
  ApiBearerAuth,
  ApiOperation,
  ApiResponse,
  ApiTags,
} from '@nestjs/swagger';
import { UserRole } from '../auth/enums/user-role.enum';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../common/decorators/roles.decorator';
import { CreateUserDto } from './dtos/create-user.dto';
import { UpdateUserDto } from './dtos/update-user.dto';
import { UsersService } from './users.service';

@ApiTags('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ')
@ApiBearerAuth()
@Controller('users')
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  // üîπ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
  @Post()
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(UserRole.ADMIN)
  @ApiOperation({ summary: '–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä)' })
  @ApiResponse({ status: 201, description: '–†–µ–∫—Ä—É—Ç–µ—Ä —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π' })
  @ApiResponse({ status: 403, description: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ' })
  async create(@Body() dto: CreateUserDto, @Request() req) {
    return this.usersService.createRecruiter(dto, req.user);
  }

  // üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  @Get()
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ summary: '–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤' })
  @ApiResponse({
    status: 200,
    description: '–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ',
  })
  async findAll() {
    return this.usersService.findAll();
  }

  // üîπ –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
  @Get(':id')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ summary: '–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID' })
  @ApiResponse({ status: 200, description: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π' })
  @ApiResponse({ status: 404, description: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' })
  async findOne(@Param('id') id: string) {
    return this.usersService.findOneById(id);
  }

  // üîπ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
  @Patch(':id')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(UserRole.ADMIN)
  @ApiOperation({ summary: '–û–Ω–æ–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä)' })
  @ApiResponse({ status: 200, description: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π' })
  @ApiResponse({ status: 403, description: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ' })
  @ApiResponse({ status: 404, description: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' })
  async update(@Param('id') id: string, @Body() dto: UpdateUserDto) {
    return this.usersService.update(id, dto);
  }

  // üîπ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
  @Delete(':id')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(UserRole.ADMIN)
  @ApiOperation({ summary: '–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä)' })
  @ApiResponse({ status: 200, description: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π' })
  @ApiResponse({ status: 403, description: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ' })
  @ApiResponse({ status: 404, description: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' })
  async remove(@Param('id') id: string) {
    return this.usersService.delete(id);
  }

  // üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  @Get(':id/created-cities')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ summary: '–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –º—ñ—Å—Ç–∞' })
  async getCreatedCities(@Param('id') id: string) {
    const user = await this.usersService.findOneById(id);
    return user?.createdCities ?? [];
  }

  // üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  @Get(':id/created-branches')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ summary: '–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —Ñ—ñ–ª—ñ—ó' })
  async getCreatedBranches(@Param('id') id: string) {
    const user = await this.usersService.findOneById(id);
    return user?.createdBranches ?? [];
  }

  // üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  @Get(':id/created-statuses')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ summary: '–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —Å—Ç–∞—Ç—É—Å–∏' })
  async getCreatedStatuses(@Param('id') id: string) {
    const user = await this.usersService.findOneById(id);
    return user?.createdStatuses ?? [];
  }

  // üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  @Get(':id/created-integrations')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ summary: '–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó' })
  async getCreatedIntegrations(@Param('id') id: string) {
    const user = await this.usersService.findOneById(id);
    return user?.createdIntegrations ?? [];
  }

  // üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  @Get(':id/created-users')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({
    summary: '–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
  })
  async getCreatedUsers(@Param('id') id: string) {
    const user = await this.usersService.findOneById(id);
    return user?.createdUsers ?? [];
  }

  // üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  @Get(':id/entities')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ summary: '–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —Å—É—Ç–Ω–æ—Å—Ç—ñ' })
  async getUserEntities(@Param('id') id: string) {
    return this.usersService.getUserEntities(id);
  }
}
