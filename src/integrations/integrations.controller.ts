import {
  Body,
  Controller,
  Delete,
  Get,
  Logger,
  Param,
  Patch,
  Post,
  Req,
  UseGuards,
} from '@nestjs/common';
import {
  ApiBearerAuth,
  ApiOperation,
  ApiResponse,
  ApiTags,
} from '@nestjs/swagger';
import { UserRole } from '../auth/enums/user-role.enum';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../common/decorators/roles.decorator';
import { CreateIntegrationDto } from './dtos/create-integration.dto';
import { UpdateIntegrationDto } from './dtos/update-integration.dto';
import { IntegrationsService } from './integrations.service';

@ApiTags('–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó')
@Controller('integrations')
export class IntegrationsController {
  private readonly logger = new Logger(IntegrationsController.name);

  constructor(private readonly integrationsService: IntegrationsService) {}

  @Post()
  @ApiBearerAuth()
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(UserRole.ADMIN)
  @ApiOperation({ summary: '–°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä)' })
  @ApiResponse({ status: 201, description: '–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ' })
  @ApiResponse({ status: 403, description: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ' })
  async create(@Body() dto: CreateIntegrationDto, @Req() req) {
    this.logger.log(`üìå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º ${req.user.id}`);
    return this.integrationsService.create(dto, req.user);
  }

  @Get()
  @ApiOperation({ summary: '–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó' })
  @ApiResponse({
    status: 200,
    description: '–°–ø–∏—Å–æ–∫ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ',
  })
  async findAll() {
    return this.integrationsService.findAll();
  }

  @Get(':id')
  @ApiOperation({ summary: '–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑–∞ ID' })
  @ApiResponse({ status: 200, description: '–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑–Ω–∞–π–¥–µ–Ω–æ' })
  @ApiResponse({ status: 404, description: '–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' })
  async findOne(@Param('id') id: string) {
    return this.integrationsService.findOne(id);
  }

  @Patch(':id')
  @ApiBearerAuth()
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(UserRole.ADMIN)
  @ApiOperation({ summary: '–û–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä)' })
  @ApiResponse({ status: 200, description: '–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ' })
  @ApiResponse({ status: 403, description: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ' })
  @ApiResponse({ status: 404, description: '–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' })
  async update(
    @Param('id') id: string,
    @Body() dto: UpdateIntegrationDto,
    @Req() req,
  ) {
    this.logger.log(
      `‚úèÔ∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó ${id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º ${req.user.id}`,
    );
    return this.integrationsService.update(id, dto, req.user);
  }

  @Delete(':id')
  @ApiBearerAuth()
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(UserRole.ADMIN)
  @ApiOperation({ summary: '–í–∏–¥–∞–ª–∏—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä)' })
  @ApiResponse({ status: 200, description: '–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ' })
  @ApiResponse({ status: 403, description: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ' })
  @ApiResponse({ status: 404, description: '–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' })
  async remove(@Param('id') id: string, @Req() req) {
    this.logger.log(
      `‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó ${id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º ${req.user.id}`,
    );
    return this.integrationsService.delete(id, req.user);
  }
}
