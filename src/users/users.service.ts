import {
  BadRequestException,
  ForbiddenException,
  Injectable,
  Logger,
  NotFoundException,
} from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import * as bcrypt from 'bcryptjs';
import { Model, Types, isValidObjectId } from 'mongoose';
import { Candidate } from 'src/candidates/schemas/candidate.schema';
import { UserRole } from '../auth/enums/user-role.enum';
import { CreateUserDto } from './dtos/create-user.dto';
import { UpdateUserDto } from './dtos/update-user.dto';
import { User } from './schemas/user.schema';

@Injectable()
export class UsersService {
  private readonly logger = new Logger(UsersService.name);

  constructor(
    @InjectModel(User.name) private userModel: Model<User>,
    @InjectModel(Candidate.name) private candidateModel: Model<Candidate>, //
  ) {}

  /**
   * üîπ –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
   */
  async findByEmail(email: string): Promise<User | null> {
    return this.userModel.findOne({ email }).exec();
  }

  /**
   * üîπ –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
   */
  async findOneById(id: string): Promise<User> {
    if (!isValidObjectId(id)) {
      throw new BadRequestException('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
    }

    const user = await this.userModel
      .findById(id)
      .populate('createdCities')
      .populate('createdBranches')
      .populate('createdStatuses')
      .populate('createdIntegrations')
      .populate('createdUsers', 'firstName lastName email role status'); // ‚úÖ –¢–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    if (!user) {
      this.logger.warn(`‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID ${id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
      throw new NotFoundException('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }

    return user;
  }

  /**
   * üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤
   */
  async findAllRecruiters(): Promise<User[]> {
    return this.userModel.find({ role: UserRole.RECRUITER }).exec();
  }

  async findAll(): Promise<User[]> {
    return this.userModel.find().exec();
  }

  async getCandidatesForUser(user: User): Promise<Candidate[]> {
    if (user.role === UserRole.ADMIN) {
      // –ê–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
      return this.candidateModel.find().populate('createdBy assignedTo').exec();
    }
    // –†–µ–∫—Ä—É—Ç–µ—Ä –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    return this.candidateModel.find({ assignedTo: user.id }).exec();
  }

  /**
   * üîπ –°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   */
  async createAdmin(dto: CreateUserDto): Promise<User> {
    const existingUser = await this.findByEmail(dto.email);
    if (existingUser) {
      throw new BadRequestException('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î');
    }

    const hashedPassword = await bcrypt.hash(dto.password, 10);

    const admin = await this.userModel.create({
      ...dto,
      password: hashedPassword,
      role: UserRole.ADMIN, // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–µ–º —Ä–æ–ª—å
    });

    this.logger.log(`‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä ${admin.email} —Å—Ç–≤–æ—Ä–µ–Ω–∏–π`);

    return admin;
  }

  /**
   * üîπ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
   */
  async createRecruiter(dto: CreateUserDto, admin: User): Promise<User> {
    if (admin.role !== UserRole.ADMIN) {
      throw new ForbiddenException(
        '–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä—ñ–≤.',
      );
    }

    const existingUser = await this.findByEmail(dto.email);
    if (existingUser) {
      throw new BadRequestException('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î');
    }

    const hashedPassword = await bcrypt.hash(dto.password, 10);

    const newUser = await this.userModel
      .create({
        ...dto,
        password: hashedPassword,
        createdBy: new Types.ObjectId(admin.id),
      })
      .then((user) => user.toObject() as User & { _id: Types.ObjectId }); // üëà –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º _id

    await this.addCreatedEntity(admin.id, newUser._id.toString(), 'user');

    this.logger.log(
      `‚úÖ –†–µ–∫—Ä—É—Ç–µ—Ä ${newUser.email} —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${admin.email}`,
    );

    return newUser;
  }

  /**
   * üîπ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
   */
  async update(id: string, dto: UpdateUserDto): Promise<User> {
    if (!isValidObjectId(id)) {
      throw new BadRequestException('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
    }

    const user = await this.userModel.findById(id);
    if (!user) {
      throw new NotFoundException('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
    if (dto.password) {
      dto.password = await bcrypt.hash(dto.password, 10);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    Object.keys(dto).forEach((key) => {
      if (dto[key] !== undefined) {
        user[key] = dto[key];
      }
    });

    await user.save();

    this.logger.log(`üõ†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user.email} –æ–Ω–æ–≤–ª–µ–Ω–∏–π`);

    return user;
  }

  /**
   * üîπ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
   */
  async delete(id: string): Promise<void> {
    if (!isValidObjectId(id)) {
      throw new BadRequestException('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
    }

    const user = await this.userModel.findById(id);
    if (!user) {
      throw new NotFoundException('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }

    await this.userModel.findByIdAndDelete(id).exec();
    this.logger.log(`‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user.email} –≤–∏–¥–∞–ª–µ–Ω–∏–π`);
  }

  /**
   * üîπ –î–æ–±–∞–≤–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   */
  async addCreatedEntity(userId: string, entityId: string, entityType: string) {
    if (!isValidObjectId(userId) || !isValidObjectId(entityId)) {
      throw new BadRequestException('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID');
    }

    let updateField;
    switch (entityType) {
      case 'city':
        updateField = {
          $push: { createdCities: new Types.ObjectId(entityId) },
        };
        break;
      case 'branch':
        updateField = {
          $push: { createdBranches: new Types.ObjectId(entityId) },
        };
        break;
      case 'status':
        updateField = {
          $push: { createdStatuses: new Types.ObjectId(entityId) },
        };
        break;
      case 'integration':
        updateField = {
          $push: { createdIntegrations: new Types.ObjectId(entityId) },
        };
        break;
      case 'user': // ‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        updateField = { $push: { createdUsers: new Types.ObjectId(entityId) } };
        break;
      default:
        throw new BadRequestException(
          `–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø —Å—É—Ç–Ω–æ—Å—Ç—ñ: ${entityType}`,
        );
    }

    await this.userModel.findByIdAndUpdate(userId, updateField, { new: true });
  }

  /**
   * üîπ –£–¥–∞–ª–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   */
  async removeCreatedEntity(
    userId: string,
    entityId: string,
    entityType: string,
  ) {
    if (!isValidObjectId(userId) || !isValidObjectId(entityId)) {
      throw new BadRequestException('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID');
    }

    let updateField;
    switch (entityType) {
      case 'city':
        updateField = {
          $pull: { createdCities: new Types.ObjectId(entityId) },
        };
        break;
      case 'branch':
        updateField = {
          $pull: { createdBranches: new Types.ObjectId(entityId) },
        };
        break;
      case 'status':
        updateField = {
          $pull: { createdStatuses: new Types.ObjectId(entityId) },
        };
        break;
      case 'integration':
        updateField = {
          $pull: { createdIntegrations: new Types.ObjectId(entityId) },
        };
        break;
      case 'user': // ‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        updateField = { $pull: { createdUsers: new Types.ObjectId(entityId) } };
        break;
      default:
        throw new BadRequestException(
          `–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø —Å—É—Ç–Ω–æ—Å—Ç—ñ: ${entityType}`,
        );
    }

    await this.userModel.findByIdAndUpdate(userId, updateField, { new: true });
  }

  /**
   * üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   */
  async getUserEntities(id: string) {
    if (!isValidObjectId(id)) {
      throw new BadRequestException('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
    }

    const user = await this.findOneById(id);
    return {
      createdCities: user.createdCities ?? [],
      createdBranches: user.createdBranches ?? [],
      createdStatuses: user.createdStatuses ?? [],
      createdIntegrations: user.createdIntegrations ?? [],
      createdUsers: user.createdUsers ?? [], // ‚úÖ –¢–µ–ø–µ—Ä—å —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–µ–Ω
    };
  }
}
