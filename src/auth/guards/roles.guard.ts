import {
  CanActivate,
  ExecutionContext,
  ForbiddenException,
  Injectable,
  Logger,
  UnauthorizedException,
} from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { ROLES_KEY } from '../../common/decorators/roles.decorator';
import { UserRole } from '../enums/user-role.enum';

@Injectable()
export class RolesGuard implements CanActivate {
  private readonly logger = new Logger(RolesGuard.name);

  constructor(private reflector: Reflector) {}

  canActivate(context: ExecutionContext): boolean {
    const requiredRoles = this.reflector.getAllAndOverride<UserRole[]>(
      ROLES_KEY,
      [context.getHandler(), context.getClass()],
    );

    // ‚úÖ –Ø–∫—â–æ —Ä–æ–ª—ñ –Ω–µ –≤–∏–º–∞–≥–∞—é—Ç—å—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–∞–ª—ñ
    if (!requiredRoles) return true;

    const request = context.switchToHttp().getRequest();
    const user = request.user;

    if (!user || !user.role) {
      this.logger.warn('‚ùóÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∞–±–æ —Ä–æ–ª—å –≤—ñ–¥—Å—É—Ç–Ω—è');
      throw new UnauthorizedException('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
    }

    if (!requiredRoles.includes(user.role as UserRole)) {
      this.logger.warn(
        `üö´ –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ä–æ–ª–ª—é ${user.role} –Ω–µ –º–∞—î –¥–æ–∑–≤–æ–ª—É`,
      );
      throw new ForbiddenException(
        `–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ: –ø–æ—Ç—Ä—ñ–±–Ω–∞ –æ–¥–Ω–∞ –∑ —Ä–æ–ª–µ–π: ${requiredRoles.join(', ')}`,
      );
    }

    return true;
  }
}
